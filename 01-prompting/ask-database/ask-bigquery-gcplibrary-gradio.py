""" Ask BigQuery in natural language using text-bison. Gradio demo
    This uses GCP standard package "google-cloud-bigquery" to access Bigquery. 
    It does NOT use SQLAlchemy package, chains or agents from LangChain.
"""

import gradio as gr

from vertexai.preview.language_models import TextGenerationModel

from langchain.llms import VertexAI
from langchain import PromptTemplate

from google.cloud import bigquery

project_id = "YOUR_PROJECT_ID"  # <--- CHANGE THIS
location = "us-central1"  
dataset_id = 'ml_datasets_fitbit_uscentral1' # Fitbit public dataset from Kaggle
table_name1 = 'user_activity' 
table_name2 = 'user_location' 
table_name3 = 'user_weight_final' 

table_names = (table_name1,table_name2,table_name3)

def predict (prompt):
  model = TextGenerationModel.from_pretrained("text-bison@001")
  response = model.predict(
            prompt,
            max_output_tokens=1024,
            temperature=0,
            top_p=1,
            top_k=1,
        )
  return response


def runQuery(query: str):
  client = bigquery.Client(project=project_id)
  #print(query)
  query_job = client.query(query)
  rows = query_job.result()
  return rows


def getTableDefinition (table_names):
  result=''
  for table_name in table_names:
    query = f"""
    SELECT
    ddl
    FROM
    `{dataset_id}`.`INFORMATION_SCHEMA`.`TABLES`
    WHERE
    table_name="{table_name}"
    """
    sqlResponse = runQuery(query)
    for row in sqlResponse:
      result = result+'\n'+row[0]

  return result

# print(getTableDefinition(table_names=['user_activity', 'user_location']))


def bq_qna(question):
  prompt_template = """For given question, create a syntactically correct bigquery sql query.
    Use table definitions to get the columns names and use only those column names.
    Use a limit given in the question and if not given then use a limit of {top_n} in the query using bigquery LIMIT clause.

    Only use the following tables:
    {table_info}

    Question: {question}"""

  top_n = 5
  prompt = prompt_template.format(question=question,
                table_info=getTableDefinition(table_names=table_names),
                top_n=top_n)

  sql_query=predict(prompt)
  return runQuery(str(sql_query)).to_dataframe().values, sql_query


with gr.Blocks() as demo:
    gr.Markdown(
    """
    ## Ask BiqQuery

    This demo is to showcase answering questions on a tabular data available in Big Query using Vertex PALM LLM & Langchain.

    This demo uses a sample public dataset from Kaggle (https://www.kaggle.com/datasets/arashnic/fitbit)

    ### Sample Inputs:
    1. what is the minimum number of steps taken by user 1644430081 ?
    2. what is the average steps covered by 1644430081?
    3. what is the highest number of Calories burnt in the month of May by 1644430081 ?
    4. find all users that have made more than 12000 totalsteps and are located in Chicago.

    ### Enter a search query...

    """)
    with gr.Row():
      with gr.Column():
        input_text = gr.Textbox(label="Question", placeholder="what is the minimum steps taken by 1644430081")

    with gr.Row():
      generate = gr.Button("Ask BigQuery")

    with gr.Row():
      label2 = gr.Textbox(label="Output")
    with gr.Row():
      label3 = gr.Textbox(label="SQL query generated by LLM")

    generate.click(bq_qna,input_text, [label2, label3])
    
demo.launch(share=False, debug=False)